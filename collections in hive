Hive Complex Data type:
******************************************************************************************************************************
                                                      MAP DATA TYPE:
******************************************************************************************************************************
creatung table with map data type :
  create table map_data(col map<int,string>);
Inserting data into table :
  insert into map_data select map(1,'A',2,'B');
selecting map data from the table:
  select * from map_data; --{1:"A",2:"B"}
unpacking the map elements :  
  select map_keys(col)[0],map_keys(col)[1],map_values(col)[0], map_values(col)[1] from map_data;


******************************************************************************************************************************
                                                      ARRAY DATA TYPE:
******************************************************************************************************************************
creatung table with array data type :
  create table array_data(col array<int>);
Inserting data into table :
  insert into array_data select array(10,20,30,40);
selecting array data from the table:
  select * from array_data; --[10,20,30,40]
unpacking the array elements :  
  select col[0],col[1],col[2],col[3] from array_data;
  
  
******************************************************************************************************************************
                                                      STRUCT DATA TYPE:
******************************************************************************************************************************
creatung table with struct data type :
  create table struct_data(col struct<name:string,subject:array<string>,marks:map<string,int>>);
Inserting data into table :
  insert into struct_data select named_struct('name','student1','subject',array('subject1','subject2'),'marks',map('maths',90,'hindi',90));
selecting struct data from the table:
  select * from struct_data; --{"name":"student1","subject":["subject1","subject2"],"marks":{"maths":90,"hindi":90}}
unpacking the array elements :  
  select col.name,col.subject[0],col.subject[1],map_keys(col.marks)[0],map_keys(col.marks)[1],map_values(col.marks)[0],map_values(col.marks)[1] from struct_data;

******************************************************************************************************************************
                                                      UNIONTYPE DATA TYPE:
******************************************************************************************************************************
creatung table with uniontype data type :
  create table union_data(col uniontype<int,string,array<int>,map<int,string>,struct<name:string,marks:array<int>>>);
Inserting data into table :
  insert into union_data select create_union(0,100,'XYZ',array(10,20),map(10,'IT',20,'HR'),named_struct('name','ABC','marks',array(40,60,90)));
  insert into union_data select create_union(0,200,'XYZ',array(10,20),map(10,'IT',20,'HR'),named_struct('name','ABC','marks',array(40,60,90)));
  insert into union_data select create_union(1,100,'XYZ',array(10,20),map(10,'IT',20,'HR'),named_struct('name','ABC','marks',array(40,60,90)));
  insert into union_data select create_union(2,100,'XYZ',array(10,20),map(10,'IT',20,'HR'),named_struct('name','ABC','marks',array(40,60,90)));
  insert into union_data select create_union(3,100,'XYZ',array(10,20),map(10,'IT',20,'HR'),named_struct('name','ABC','marks',array(40,60,90)));
  insert into union_data select create_union(4,100,'XYZ',array(10,20),map(10,'IT',20,'HR'),named_struct('name','ABC','marks',array(40,60,90)));
  insert into union_data select create_union(4,100,'XYZ',array(10,20),map(10,'IT',20,'HR'),named_struct('name','ABC','marks',array(50,30,80)));
selecting uniontype data from the table:
  select * from union_data; 
  {3:{10:"IT",20:"HR"}}
  {4:{"name":"ABC1","marks":[50,30,80]}}
  {0:100}
  {4:{"name":"ABC","marks":[40,60,90]}}
  {1:"XYZ"}
  {0:200}
  {2:[10,20]}
unpacking the uniontype elements :  
  select extract_union(col,0) from union_data where extract_union(col,0) is not null;
  select extract_union(col,4).name, extract_union(col,4).marks[0], extract_union(col,4).marks[1], extract_union(col,4).marks[2] from union_data where extract_union(col,4) is not null;


